apiVersion: v1
data:
  sync.py: |-
    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
    import json
    import os, subprocess
    import sys

    class Controller(BaseHTTPRequestHandler):
      def sync(self, object, finalizing):
        try:
          projectid = object['status']['projectid']
        except KeyError:
          projectid = None
        try:
          self.do_login()
          if finalizing:
            return self.do_delete_project(object, projectid)
          else:
            return self.do_create_project(object, projectid)
        except RuntimeError as err:
          print(str(err))

      def do_login(self):
        argocdHost=os.environ["ARGOCD_HOST"]
        print("Logging into {}".format(argocdHost))
        argocdCLICmd = subprocess.Popen(["/argocd/argocd", "login", argocdHost, "--username", os.environ["ARGOCD_USERNAME"].replace("\n", ''), "--password", os.environ["ARGOCD_PASSWORD"].replace("\n", '')], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        argocdCLIOutput,_ = argocdCLICmd.communicate()
        argocdCLIReturnCode = argocdCLICmd.wait()
        print("Got process code {} from argocdCLI with output: {} ".format(argocdCLIReturnCode, argocdCLIOutput))
        sys.stdout.flush()
        if argocdCLIReturnCode != 0:
          raise RuntimeError( "ArgoCD Login failed" )
          #sys.exit()

      def do_create_project(self, object, projectid):
        if not projectid:
          projectName = object['spec']['name']
          print("No project id found, creating project")
          argocdCLI = subprocess.Popen(["/argocd/argocd", "app", "get", projectName], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          argocdCLIOutput,_ = argocdCLI.communicate()
          returnCode = argocdCLI.wait()
          print("Got process code {} from argocdCLI with output: {} ", returnCode, argocdCLIOutput)
          if returnCode == 0:
            returnVal={"status": {"projectid": projectName}}
          else:
            returnVal={"status": {"error": argocdCLIOutput}}
            argocdCLI = subprocess.Popen(["/argocd/argocd", "app", "create", projectName, "--repo", "https://github.com/cpage-pivotal/spring-webdb-config", "--path", "dev", "--dest-server", "https://kubernetes.default.svc", "--dest-namespace", projectName], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            argocdCLIOutput,_ = argocdCLI.communicate()
            returnCode = argocdCLI.wait()
            if returnCode != 0:
              returnVal={"status": {"error": argocdCLIOutput}}
            
          print(str.format("* Updating status for {}/{}: {}", object["metadata"]["namespace"], object["metadata"]["name"],returnVal))
          return returnVal
        else:
          print("Project found, skipping")
          return {}

      def do_delete_project(self, object, projectid):
        projectName = object['spec']['name']
        if not projectid:
          print("Team URL not present in status, skipping")
          return {"finalized": True}
        else:
          print("Attempting delete of project %s" % projectName)
          argocdCLI = subprocess.Popen(["/argocd/argocd", "app", "delete", projectName], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          argocdCLIOutput,_ = argocdCLI.communicate()
          returnCode = argocdCLI.wait()
          print("Got process code {} from argocdCLI with output: {} ".format(returnCode, argocdCLIOutput))
          if returnCode == 0:
            print("Project deletion in progress")
            return {"finalized": False, "resyncAfterSeconds": 2.0}
          else:
            if argocdCLIOutput.find("NotFound") > -1:
              print("Project deletion successful, marking finalized.")
              return {"finalized": True}
            else:
              try:
                status = object['status']
              except KeyError:
                status = {}
              
              print("Unhandled error when deleting.  Returning error.")
              status['error']=argocdCLIOutput
              return {"finalized": False, "status": status}

      def do_POST(self):
        print("Start Post")
        # Serve the sync() function as a JSON webhook.
        observed = json.loads(self.rfile.read(int(self.headers.getheader("content-length"))))
        desired = self.sync(observed["object"], observed.get("finalizing", False))

        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps(desired))
        sys.stdout.flush()

    HTTPServer(("", 80), Controller).serve_forever()

kind: ConfigMap
metadata:
  name: argocd-project-controller
  namespace: argocd-project-controller
  annotations:
    kapp.k14s.io/versioned: ""
